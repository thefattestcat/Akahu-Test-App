{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/version.ts","../src/errors.ts","../src/resources/base.ts","../src/resources/auth.ts","../src/resources/identities.ts","../src/resources/accounts.ts","../src/resources/connections.ts","../src/resources/payments.ts","../src/resources/transfers.ts","../src/resources/transactions.ts","../src/resources/users.ts","../src/resources/webhooks.ts","../src/client.ts"],"sourcesContent":["import axios from 'axios';\r\nimport type { AxiosResponse, AxiosError } from 'axios';\r\nexport type Protocol = 'http' | 'https';\r\n\r\n\r\n/**\r\n * Build a URL from constituent components.\r\n */\r\nexport function buildUrl(\r\n  { protocol, host, port, path = '', query = {} }:\r\n  { protocol: Protocol, host: string, port?: number, path?: string, query?: Record<string, string | undefined> }\r\n): string {\r\n  // If not specified, port will be chosen by browser based on protocol choice (http or https).\r\n  const _port = port ? `:${port}` : '';\r\n\r\n  // Clean `undefined` values from the query params \r\n  const cleanedQuery = Object.fromEntries(\r\n    Object.entries(query || {}).filter(([_, v]) => typeof v !== 'undefined')\r\n  ) as Record<string, string>;\r\n\r\n  // Convert to URL encoded query string\r\n  const queryString = Object.keys(cleanedQuery).length !== 0\r\n    ? '?' + new URLSearchParams(cleanedQuery).toString()\r\n    : '';\r\n\r\n  return `${protocol}://${host}${_port}/${path}${queryString}`;\r\n}\r\n\r\n\r\nexport function pick<T extends Record<string, any>>(obj: T, ...props: string[]): Partial<T> {\r\n  return Object.fromEntries(\r\n    Object.entries(obj).filter(([k]) => props.includes(k))\r\n  ) as Partial<T>;\r\n}\r\n\r\n\r\n/**\r\n * Axios error interceptor to retry on network failures.\r\n * Dormant by default - is activated by including `retries` in the axios config.\r\n */\r\nexport function axiosRetryOnNetworkError(error: AxiosError): Promise<AxiosResponse> {\r\n  // Only handle axios errors.\r\n  if (!error.isAxiosError) return Promise.reject(error);\r\n\r\n  const { config } : any = error;\r\n  const { method, headers, retries = 0, __retryCount = 0 } = config;\r\n\r\n  // POST requests can only be retried if they include an idempotency key.\r\n  // Other methods (i.e. get, patch, delete) are considered idempotent by default.\r\n  const isIdempotent =\r\n    method.toUpperCase() !== 'POST' ||\r\n    typeof headers['Idempotency-Key'] === 'string';\r\n\r\n  const shouldRetry = \r\n    isIdempotent &&\r\n    __retryCount < retries &&\r\n    isNetworkError(error) &&  // Don't retry due to server errors\r\n    isRetryAllowed(error);    // Don't retry if the error is permanent (e.g. SSL related)\r\n\r\n  if (!shouldRetry) {\r\n    return Promise.reject(error);\r\n  }\r\n\r\n  config.__retryCount = __retryCount + 1;\r\n  return axios(config);  \r\n}\r\n\r\n/**\r\n * Determine whether an axios error instance was caused by network error\r\n * (and should therefore be retryable).\r\n * \r\n * Borrowed from {@link https://github.com/softonic/axios-retry/blob/master/es/index.js}\r\n * with minor changes as we want to retry on timeout.\r\n */\r\nfunction isNetworkError(error: AxiosError): boolean {\r\n  return error.isAxiosError &&\r\n         !error.response &&         // Network errors have no response\r\n         !axios.isCancel(error);    // Don't retry cancelled requests\r\n}\r\n\r\n/**\r\n * Inspect network error code from axios to determine if it makes sense to retry it.\r\n * \r\n * Borrowed from {@link https://github.com/sindresorhus/is-retry-allowed/blob/main/index.js}\r\n */\r\nfunction isRetryAllowed(error: AxiosError): boolean {\r\n  return error.code === undefined ||  // Errors due to timeout have no error code.\r\n         !retryDenyList.has(error.code);\r\n}\r\n\r\nconst retryDenyList = new Set([\r\n\t'ENOTFOUND',\r\n\t'ENETUNREACH',\r\n\t'UNABLE_TO_GET_ISSUER_CERT',\r\n\t'UNABLE_TO_GET_CRL',\r\n\t'UNABLE_TO_DECRYPT_CERT_SIGNATURE',\r\n\t'UNABLE_TO_DECRYPT_CRL_SIGNATURE',\r\n\t'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY',\r\n\t'CERT_SIGNATURE_FAILURE',\r\n\t'CRL_SIGNATURE_FAILURE',\r\n\t'CERT_NOT_YET_VALID',\r\n\t'CERT_HAS_EXPIRED',\r\n\t'CRL_NOT_YET_VALID',\r\n\t'CRL_HAS_EXPIRED',\r\n\t'ERROR_IN_CERT_NOT_BEFORE_FIELD',\r\n\t'ERROR_IN_CERT_NOT_AFTER_FIELD',\r\n\t'ERROR_IN_CRL_LAST_UPDATE_FIELD',\r\n\t'ERROR_IN_CRL_NEXT_UPDATE_FIELD',\r\n\t'OUT_OF_MEM',\r\n\t'DEPTH_ZERO_SELF_SIGNED_CERT',\r\n\t'SELF_SIGNED_CERT_IN_CHAIN',\r\n\t'UNABLE_TO_GET_ISSUER_CERT_LOCALLY',\r\n\t'UNABLE_TO_VERIFY_LEAF_SIGNATURE',\r\n\t'CERT_CHAIN_TOO_LONG',\r\n\t'CERT_REVOKED',\r\n\t'INVALID_CA',\r\n\t'PATH_LENGTH_EXCEEDED',\r\n\t'INVALID_PURPOSE',\r\n\t'CERT_UNTRUSTED',\r\n\t'CERT_REJECTED',\r\n\t'HOSTNAME_MISMATCH'\r\n]);\r\n\r\n\r\n// https://github.com/flexdinesh/browser-or-node/blob/master/src/index.js\r\nexport const isBrowser = () => (\r\n  typeof window !== 'undefined' && typeof window.document !== 'undefined'\r\n);\r\n\r\nexport const isNode = () => (\r\n  typeof process === 'object' &&\r\n  Boolean(process.versions?.node) &&\r\n  !isReactNative()\r\n);\r\n\r\n// https://github.com/facebook/react-native/commit/3c65e62183ce05893be0822da217cb803b121c61\r\nexport const isReactNative = () => (\r\n  typeof navigator === 'object' && navigator.product === 'ReactNative'\r\n);","export const version = \"1.1.0\";\n","import type { AxiosResponse } from 'axios';\r\n\r\n\r\nclass AkahuError extends Error {\r\n  /**\r\n   * Flag that can be used to detect exceptions thrown by the Akahu SDK.\r\n   */\r\n  static isAkahuError = true;\r\n}\r\n\r\n\r\n/**\r\n * Error type for error responses received from the Akahu API.\r\n * An error response is characterised by a non 2XX status code and/or a body\r\n * payload that contains `success: false` along with an accompanying error message.\r\n * \r\n * @noInheritDoc\r\n * @category Error\r\n */\r\nexport class AkahuErrorResponse extends AkahuError {\r\n  /**\r\n   * The response status code.\r\n   */\r\n  status: number;\r\n  /**\r\n   * The full {@link https://axios-http.com/docs/res_schema AxiosReponse}\r\n   * object from axios.\r\n   */\r\n  response: AxiosResponse;\r\n\r\n  /** @internal */\r\n  static oAuthErrorCodeMap: Record<string, string> = {\r\n    invalid_request: 'Invalid OAuth request.',\r\n    unauthorized_client: 'This application is not authorized to make this request.',\r\n    unsupported_response_type: 'Unsupported OAuth response type.',\r\n    invalid_scope: 'Unknown or invalid scope.',\r\n    server_error: 'Unknown server error.',\r\n    temporarily_unavailable: 'The authorization server is temporarily unavailable.',\r\n    invalid_grant: 'Invalid OAuth request.',\r\n  }\r\n\r\n  /** @internal */\r\n  constructor(response: AxiosResponse) {\r\n    const { status, statusText, data = {} } =  response;\r\n    const { message, error, error_description } = data;\r\n    let _message: string;\r\n\r\n    // `error` and `error_description` are specific to the OAuth endpoints.\r\n    // `error_description` is more user-friendly, but optional:\r\n    // https://www.oauth.com/oauth2-servers/server-side-apps/possible-errors/\r\n    if (typeof error_description === 'string') {\r\n      _message = error_description;\r\n    } else if (error in AkahuErrorResponse.oAuthErrorCodeMap) {\r\n      _message = AkahuErrorResponse.oAuthErrorCodeMap[error];\r\n    } else {\r\n      // Detail for other error responses are nested under the `message` key.\r\n      // Include a fallback to statusText just in case things go really wrong.\r\n      _message = message ?? statusText;\r\n    }\r\n\r\n    super(_message);\r\n    this.status = status;\r\n    this.response = response;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Error type for errors that occur during the webhook validation process.\r\n * \r\n * @noInheritDoc\r\n * @category Error\r\n */\r\nexport class AkahuWebhookValidationError extends AkahuError {};","import type { AkahuClient } from '../client';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class BaseResource {\r\n  protected readonly _client: AkahuClient;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(client: AkahuClient) {\r\n    this._client = client;\r\n  }\r\n}\r\n","import { Protocol, buildUrl } from \"../utils\";\r\nimport { BaseResource } from \"./base\";\r\nimport { AuthorizationToken } from \"../models\";\r\n\r\n\r\n/**\r\n * Utilities for authorizing users using OAuth2.\r\n * \r\n * {@link https://developers.akahu.nz/docs/authorizing-with-oauth2}\r\n * \r\n * @category Resource\r\n */\r\nexport class AuthResource extends BaseResource {\r\n\r\n  /**\r\n   * Build the OAuth Authorization URL\r\n   * \r\n   * @param options Options for customising the generated URL.\r\n   * \r\n   * {@link https://developers.akahu.nz/docs/authorizing-with-oauth2#the-authorization-request}\r\n  */\r\n  public buildAuthorizationUrl(options: {\r\n    /**\r\n     * Where to redirect the user once they have accepted or rejected the access request.\r\n     * This **must** match one of your app's Redirect URIs.\r\n     */\r\n    redirect_uri: string,\r\n    /**\r\n     * The type of OAuth response. Currently `code` is the only supported option.\r\n     * \r\n     * @default `code`\r\n     */\r\n    response_type?: string,\r\n    scope?: string,\r\n    email?: string,\r\n    connection?: string,\r\n    state?: string,\r\n    protocol?: Protocol,\r\n    host?: string,\r\n    port?: number,\r\n    path?: string,\r\n  }) {\r\n    // Unpack options with defaults\r\n    const {\r\n      protocol, host, port, path,\r\n      response_type, scope, redirect_uri, state, email, connection\r\n    } = {\r\n      protocol: 'https' as const,\r\n      host: 'oauth.akahu.io',\r\n      path: '',\r\n      response_type: 'code',\r\n      scope: 'ENDURING_CONSENT',\r\n      ...options\r\n    };\r\n\r\n    // Construct main OAuth query params\r\n    const { appToken: client_id } = this._client.authConfig;\r\n    const query: Record<string, string> = { response_type, redirect_uri, scope, client_id };\r\n\r\n    // Include optional params if specified in options\r\n    if (email) query.email = email;\r\n    if (connection) query.connection = connection;\r\n    if (state) query.state = state;\r\n\r\n    return buildUrl({ protocol, host, port, path, query })\r\n  }\r\n\r\n  /**\r\n   * Exchange an OAuth authorization code for an access token.\r\n   * \r\n   * {@link https://developers.akahu.nz/docs/authorizing-with-oauth2#exchanging-the-authorization-code}\r\n   * {@link https://developers.akahu.nz/reference/post_token}\r\n   */\r\n  public async exchange(code: string, redirect_uri: string,\r\n                        grant_type: string = 'authorization_code') : Promise<AuthorizationToken> {\r\n    // POST parameters for OAuth code exchange\r\n    const { appToken: client_id, appSecret: client_secret } = this._client.authConfig;\r\n    const data = { code, redirect_uri, grant_type, client_id, client_secret };\r\n\r\n    return await this._client._apiCall<AuthorizationToken>({ path: '/token', method: 'POST', data });\r\n  }\r\n\r\n  /**\r\n   * Revoke the specified user auth token:\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/delete_token}\r\n   */\r\n  public async revoke(token: string) {\r\n    return await this._client._apiCall<void>({ path: '/token', method: 'DELETE', auth: { token } });\r\n  }\r\n}\r\n","import { BaseResource } from \"./base\";\r\nimport { Protocol } from \"../utils\";\r\nimport { IdentityResult } from \"../models\";\r\n\r\n\r\n/**\r\n * Utilities for requesting identity verification using OAuth2.\r\n * \r\n * {@link https://developers.akahu.nz/docs/identity-verification}\r\n * \r\n * @category Resource\r\n */\r\nexport class IdentitiesResource extends BaseResource {\r\n  /**\r\n   * Build the Identity OAuth Authorization URL.\r\n   * \r\n   * {@link https://developers.akahu.nz/docs/identity-verification#the-authorization-request}\r\n  */\r\n  public buildAuthorizationUrl(\r\n    params: {\r\n      protocol?: Protocol,\r\n      host?: string,\r\n      port?: number,\r\n      path?: string,\r\n      response_type?: string,\r\n      redirect_uri: string,\r\n      scope?: string,\r\n      state?: string,\r\n    }\r\n  ) {\r\n    // Borrow implementation from `OAuthResource.buildAuthorizationUrl`\r\n    return this._client.auth.buildAuthorizationUrl({ scope: 'ONEOFF', ...params });\r\n  }\r\n\r\n  /**\r\n   * Retrieve an identity result using the code/id returned after successful authorization using the\r\n   * OAuth identity verification flow.\r\n   * \r\n   * {@link https://developers.akahu.nz/docs/identity-verification#retrieving-identity-results-with-the-oauth-result-code}\r\n   */\r\n  public async get(code: string): Promise<IdentityResult> {\r\n    return await this._client._apiCall<IdentityResult>({ path: `/identity/${code}`, auth: { basic: true } });\r\n  }\r\n}\r\n\r\n","import { BaseResource } from \"./base\";\r\n\r\nimport {\r\n  Account,\r\n  Transaction,\r\n  PendingTransaction,\r\n  TransactionQueryParams,\r\n  Paginated,\r\n} from \"../models\";\r\n\r\n/**\r\n * Utilities for managing Akahu accounts that have been linked by users.\r\n *\r\n * {@link https://developers.akahu.nz/docs/accessing-account-data}\r\n *\r\n * @category Resource\r\n */\r\nexport class AccountsResource extends BaseResource {\r\n  /**\r\n   * List all accounts that have been connected by the user associated with the specified `token`.\r\n   *\r\n   * {@link https://developers.akahu.nz/reference/get_accounts}\r\n   */\r\n  public async list(token: string): Promise<Account[]> {\r\n    return await this._client._apiCall<Account[]>({\r\n      path: \"/accounts\",\r\n      auth: { token },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get a single account that has been connected by the user associated with the specified `token`.\r\n   *\r\n   * {@link https://developers.akahu.nz/reference/get_accounts-id}\r\n   */\r\n  public async get(token: string, accountId: string): Promise<Account> {\r\n    return await this._client._apiCall<Account>({\r\n      path: `/accounts/${accountId}`,\r\n      auth: { token },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * List transactions for a specified account.\r\n   *\r\n   * {@link https://developers.akahu.nz/reference/get_accounts-id-transactions}\r\n   */\r\n  public async listTransactions(\r\n    token: string,\r\n    accountId: string,\r\n    query: TransactionQueryParams = {}\r\n  ): Promise<Paginated<Transaction>> {\r\n    return await this._client._apiCall<Paginated<Transaction>>({\r\n      path: `/accounts/${accountId}/transactions`,\r\n      auth: { token },\r\n      query,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * List pending transactions for a specified account.\r\n   *\r\n   * {@link https://developers.akahu.nz/reference/get_accounts-id-transactions-pending}\r\n   */\r\n  public async listPendingTransactions(\r\n    token: string,\r\n    accountId: string\r\n  ): Promise<PendingTransaction[]> {\r\n    return await this._client._apiCall<PendingTransaction[]>({\r\n      path: `/accounts/${accountId}/transactions/pending`,\r\n      auth: { token },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Refresh a single account that has been connected by the user associated with the specified `token`.\r\n   *\r\n   * {@link https://developers.akahu.nz/reference/post_refresh-id}\r\n   */\r\n  public async refresh(token: string, accountId: string): Promise<void> {\r\n    return await this._client._apiCall<void>({\r\n      path: `/refresh/${accountId}`,\r\n      method: \"POST\",\r\n      auth: { token },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Refresh all accounts that have been connected by the user associated with the specified `token`.\r\n   *\r\n   * {@link https://developers.akahu.nz/reference/post_refresh}\r\n   */\r\n  public async refreshAll(token: string): Promise<void> {\r\n    return await this._client._apiCall<void>({\r\n      path: \"/refresh\",\r\n      method: \"POST\",\r\n      auth: { token },\r\n    });\r\n  }\r\n}\r\n","import { BaseResource } from \"./base\";\r\nimport { Connection } from \"../models\";\r\n\r\n\r\n/**\r\n * Utilities to view connections that are available to your app, and refresh\r\n * accounts under a given connection.\r\n * \r\n * @category Resource\r\n */\r\nexport class ConnectionsResource extends BaseResource {\r\n  /**\r\n   * List all connections that the app has access to.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/get_connections}\r\n   */\r\n  public async list(): Promise<Connection[]> {\r\n    return await this._client._apiCall<Connection[]>({ path: '/connections', auth: { basic: true } });\r\n  }\r\n\r\n  /**\r\n   * Get an individual connection detail.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/get_connections-id}\r\n   */\r\n  public async get(connectionId: string): Promise<Connection> {\r\n    return await this._client._apiCall<Connection>({\r\n      path: `/connections/${connectionId}`,\r\n      auth: { basic: true }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Refresh all accounts that are made using the given connection and have been\r\n   * connected by the user associated with the specified `token`.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/post_refresh-id}\r\n   */\r\n  public async refresh(token: string, connectionId: string): Promise<void> {\r\n    return await this._client._apiCall<void>({\r\n      path: `/refresh/${connectionId}`,\r\n      auth: { token }\r\n    });\r\n  }\r\n}\r\n","import { BaseResource } from './base';\r\nimport { Payment, PaymentCreateParams, PaymentQueryParams } from '../models';\r\n\r\n\r\n/**\r\n * Utilities for managing bank account payments on behalf of users.\r\n * \r\n * {@link https://developers.akahu.nz/docs/making-a-payment}\r\n * \r\n * @category Resource\r\n */\r\nexport class PaymentsResource extends BaseResource {\r\n  /**\r\n   * Get a single payment made by the user associated with the specified `token`.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/get_payments-id}\r\n   */\r\n  public async get(token: string, paymentId: string): Promise<Payment> {\r\n    return await this._client._apiCall<Payment>({\r\n      path: `/payments/${paymentId}`,\r\n      auth: { token }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * List all payments made in the provided date range by the user associated\r\n   * with the specified `token`. Defaults to the last 30 days if no date range\r\n   * is provided.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/get_payments}\r\n   */\r\n  public async list(token: string, query: PaymentQueryParams = {}): Promise<Payment[]> {\r\n    // List endpoint with optional query params for date range\r\n    return await this._client._apiCall<Payment[]>({\r\n      path: '/payments',\r\n      auth: { token },\r\n      query\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initiate a payment to an external bank account on behalf of the user associated\r\n   * with the specified `token`.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/post_payments}\r\n   */\r\n  public async create(token: string, payment: PaymentCreateParams): Promise<Payment> {\r\n    return await this._client._apiCall<Payment>({\r\n      path: '/payments',\r\n      method: 'POST',\r\n      auth: { token },\r\n      data: payment\r\n    });\r\n  }\r\n}","import { BaseResource } from './base';\r\nimport { Transfer, TransferCreateParams, TransferQueryParams } from '../models';\r\n\r\n\r\n/**\r\n * Utilities for managing bank account transfers on behalf of users.\r\n * \r\n * {@link https://developers.akahu.nz/docs/making-a-transfer}\r\n * \r\n * @category Resource\r\n */\r\nexport class TransfersResource extends BaseResource {\r\n  /**\r\n   * Get a single transfer made by the user associated with the specified `token`.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/get_transfers-id}\r\n   */\r\n  public async get(token: string, transferId: string): Promise<Transfer> {\r\n    return await this._client._apiCall<Transfer>({\r\n      path: `/transfers/${transferId}`,\r\n      auth: { token }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * List all transfers made in the provided date range by the user associated\r\n   * with the specified `token`. Defaults to the last 30 days if no date range\r\n   * is provided.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/get_transfers}\r\n   */\r\n  public async list(token: string, query: TransferQueryParams = {}): Promise<Transfer[]> {\r\n    // List endpoint with optional query params for date range\r\n    return await this._client._apiCall<Transfer[]>({\r\n      path: '/transfers',\r\n      auth: { token },\r\n      query\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initiate a transfer between two of the users bank accounts.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/post_transfers}\r\n   */\r\n  public async create(token: string, transfer: TransferCreateParams): Promise<Transfer> {\r\n    return await this._client._apiCall<Transfer>({\r\n      path: '/transfers',\r\n      method: 'POST',\r\n      auth: { token },\r\n      data: transfer\r\n    });\r\n  }\r\n}","import { BaseResource } from \"./base\";\r\nimport {\r\n  Transaction,\r\n  PendingTransaction,\r\n  TransactionQueryParams,\r\n  Paginated,\r\n} from \"../models\";\r\n\r\n/**\r\n * Utilities for retrieving bank transactions from connected user accounts.\r\n *\r\n * {@link https://developers.akahu.nz/docs/accessing-transactional-data}\r\n *\r\n * @category Resource\r\n */\r\nexport class TransactionsResource extends BaseResource {\r\n  /**\r\n   * List all transactions for all accounts that have been connected by the user associated with the\r\n   * specified `token`.\r\n   *\r\n   * {@link https://developers.akahu.nz/reference/get_transactions}\r\n   */\r\n  public async list(\r\n    token: string,\r\n    query: TransactionQueryParams = {}\r\n  ): Promise<Paginated<Transaction>> {\r\n    // Paginated list endpoint with optional query params for date range & cursor\r\n    return await this._client._apiCall<Paginated<Transaction>>({\r\n      path: \"/transactions\",\r\n      auth: { token },\r\n      query,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * List all pending transactions for all accounts that have been connected by the user associated with the\r\n   * specified `token`.\r\n   *\r\n   * {@link https://developers.akahu.nz/reference/get_transactions-pending}\r\n   */\r\n  public async listPending(token: string): Promise<PendingTransaction[]> {\r\n    // Non-paginated list endpoint of pending transactions\r\n    return await this._client._apiCall<PendingTransaction[]>({\r\n      path: \"/transactions/pending\",\r\n      auth: { token },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get a single transaction from an account that has been connected by the user associated with\r\n   * the specified `token`.\r\n   *\r\n   * {@link https://developers.akahu.nz/reference/get_transactions-id}\r\n   */\r\n  public async get(token: string, transactionId: string): Promise<Transaction> {\r\n    return await this._client._apiCall<Transaction>({\r\n      path: `/transactions/${transactionId}`,\r\n      auth: { token },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get multiple transactions by id.\r\n   *\r\n   * All transactions must belong to the user associated with the specified `token`.\r\n   *\r\n   * This method may be useful to bulk refresh changed transaction data\r\n   * in response to a webhook event.\r\n   *\r\n   * {@link https://developers.akahu.nz/reference/post_transactions-ids}\r\n   */\r\n  public async getMany(\r\n    token: string,\r\n    transactionIds: string[]\r\n  ): Promise<Transaction[]> {\r\n    // Non-paginated list endpoint subset by transaction id\r\n    return this._client._apiCall<Transaction[]>({\r\n      path: \"/transactions/ids\",\r\n      method: \"POST\",\r\n      auth: { token },\r\n      data: transactionIds,\r\n    });\r\n  }\r\n}\r\n","import { BaseResource } from \"./base\";\r\nimport { User } from \"../models\";\r\n\r\n\r\n/**\r\n * Utilities for retrieving information about the Akahu user.\r\n * \r\n * @category Resource\r\n */\r\nexport class UsersResource extends BaseResource {\r\n  /**\r\n   * Get the user associated with the specified `token`.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/get_me}\r\n   */\r\n  public async get(token: string): Promise<User> {\r\n    return await this._client._apiCall<User>({ path: '/me', auth: { token } });\r\n  }\r\n}","import { BaseResource } from './base';\r\nimport { AkahuWebhookValidationError } from '../errors';\r\n\r\nimport type {\r\n  Webhook,\r\n  WebhookPayload,\r\n  WebhookEvent,\r\n  WebhookCreateParams,\r\n  WebhookEventQueryParams,\r\n} from '../models/webhooks';\r\n\r\ntype CryptoModule = typeof import(\"crypto\");\r\n\r\n// crypto may not be available on all platforms (e.g React Native).\r\n// This is ok as we only need it server side. We just need to handle the import conditionally.\r\nlet crypto: CryptoModule | undefined;\r\n\r\ntry {\r\n  crypto = require('crypto');\r\n} catch (e) {}\r\n\r\n\r\n/**\r\n * Setter and getter interface to enable external/shared caching of webhook\r\n * signing keys.\r\n * \r\n * Accessor functions may be async (by returning a Promise) or sync (by returning a value).\r\n * \r\n * See the project README for example usage.\r\n * \r\n * @category API client\r\n */\r\nexport interface WebhookSigningKeyCache {\r\n  get(key: string): string | null | Promise<string | null>;\r\n  set(key: string, value: string): void | Promise<void>,\r\n}\r\n\r\n/**\r\n * @category API client config\r\n */\r\nexport type WebhookCacheConfig = {\r\n  cache: WebhookSigningKeyCache,\r\n  key: string,\r\n  maxAgeMs: number,\r\n}\r\n\r\n\r\ntype CachedKeyData = {\r\n  id: number,\r\n  key: string,\r\n  lastRefreshed: string,\r\n}\r\n\r\n\r\n/**\r\n * Default in-memory cache for caching the webhook signing key.\r\n */\r\nclass DefaultKeyCache implements WebhookSigningKeyCache {\r\n  private readonly _cache: Record<string, string> = {};\r\n\r\n  async get(key: string): Promise<string | null > {\r\n    return this._cache[key] ?? null;\r\n  } \r\n\r\n  async set(key: string, value: string): Promise<void> {\r\n    this._cache[key] = value;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Utilities for managing, retrieving, and validating webhooks.\r\n * \r\n * {@link https://developers.akahu.nz/docs/reference-webhooks}\r\n * \r\n * @category Resource\r\n */\r\nexport class WebhooksResource extends BaseResource {\r\n\r\n  private defaultKeyCache = new DefaultKeyCache();\r\n\r\n  /**\r\n   * Gets active webhooks for the user associated with the specified `token`.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/get_webhooks}\r\n   */\r\n  public async list(token: string): Promise<Webhook[]> {\r\n    return await this._client._apiCall<Webhook[]>({\r\n      path: '/webhooks',\r\n      auth: { token }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Subscribe to a webhook.\r\n   * \r\n   * @returns The newly created webhook id.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/post_webhooks}\r\n   */\r\n  public async subscribe(token: string, webhook: WebhookCreateParams): Promise<string> {\r\n    return await this._client._apiCall<string>({\r\n      path: '/webhooks',\r\n      method: 'POST',\r\n      auth: { token },\r\n      data: webhook\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Unsubscribe from a previously created webhook.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/delete_webhooks-id}\r\n   */\r\n  public async unsubscribe(token: string, webhookId: string): Promise<void> {\r\n    return await this._client._apiCall<void>({\r\n      path: `/webhooks/${webhookId}`,\r\n      method: 'DELETE',\r\n      auth: { token },\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * List all webhook events with the specified status in the specified date\r\n   * range (defaults to last 30 days).\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/get_webhook-events}\r\n   */\r\n  public async listEvents(query: WebhookEventQueryParams): Promise<WebhookEvent[]> {\r\n    return await this._client._apiCall<WebhookEvent[]>({\r\n      path: '/webhook-events',\r\n      auth: { basic: true },\r\n      query,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get a webhook signing public-key by id.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/get_keys-id}\r\n   */\r\n  public async getPublicKey(keyId: string | number): Promise<string> {\r\n    return await this._client._apiCall<string>({\r\n      path: `/keys/${keyId}`,\r\n      auth: { basic: true },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Helper to validate a webhook request payload.\r\n   *\r\n   * See the project README for example usage.\r\n   * \r\n   * @returns The deserialized webhook payload after successful validation\r\n   * \r\n   * @throws {@link AkahuWebhookValidationError}\r\n   * if validation of the webhook fails due to invalid signature or expired signing key.\r\n   * \r\n   * @throws {@link AkahuErrorResponse}\r\n   * if the client fails to fetch the specified signing key from the Akahu API.\r\n   * \r\n   * {@link https://developers.akahu.nz/docs/reference-webhooks}\r\n   */\r\n  public async validateWebhook(\r\n    keyId: string | number,\r\n    signature: string,\r\n    webhookRequestBody: string,\r\n    cacheConfig: Partial<WebhookCacheConfig> = {},\r\n  ): Promise<WebhookPayload>\r\n  {\r\n    // Coerce keyId as a number\r\n    const _keyId = Number(keyId);\r\n\r\n    // Validate that keyId is an integer. Includes null check because Number(null) === 0 \r\n    if (!Number.isInteger(_keyId) || keyId === null) {\r\n      throw new AkahuWebhookValidationError(\r\n        `Can't validate webhook request. keyId must be an integer (received ${keyId}).`\r\n      );\r\n    }\r\n\r\n    // Initialize cache config with defaults\r\n    const _cacheConfig = {\r\n      cache: this.defaultKeyCache,\r\n      key: 'akahu__webhook_key',\r\n      maxAgeMs: 24 * 60 * 60 * 1000,  // 24 hours\r\n      ...cacheConfig\r\n    };\r\n    \r\n    // Get the public key matching keyId - either from cache or API lookup\r\n    const publicKey = await this._getPublicKey(_keyId, _cacheConfig);\r\n\r\n    // Validate the webhook signature using the retreived public key\r\n    const isValid = this._validateWebhookSignature(publicKey, signature, webhookRequestBody);\r\n\r\n    if (!isValid) {\r\n      throw new AkahuWebhookValidationError('Webhook signature verificaton failed.');\r\n    }\r\n\r\n    return JSON.parse(webhookRequestBody) as WebhookPayload;\r\n  }\r\n\r\n  /**\r\n   * Get the public key (by id) to validate a webhook signature.\r\n   * The key will be retrieved from cache if possible, falling back to API lookup.\r\n   * If a cached key exists with a newer id, an error will be thrown, as the existence of a newer\r\n   * key implies that the key has been rotated and the requested key is no longer valid.\r\n   * \r\n   * {@link https://developers.akahu.nz/docs/reference-webhooks#caching}\r\n   */\r\n  private async _getPublicKey(keyId: number, cacheConfig: WebhookCacheConfig): Promise<string> {\r\n    // Attempt to lookup key from cache\r\n    const keyDataFromCache = await this._getPublicKeyFromCache(cacheConfig);\r\n    \r\n    // Validate the cached key matches\r\n    if (keyDataFromCache !== null) {\r\n      const { id, key } = keyDataFromCache;\r\n\r\n      // Validate that the cached key has same id as requested key\r\n      if (keyId === id) {\r\n        return key;\r\n      }\r\n\r\n      // Throw an error if the requested key has been superseded\r\n      if (keyId < id) {\r\n        throw new AkahuWebhookValidationError(\r\n          `Webhook signing key (id: ${keyId}) has expired. Unable to validate webhook.`\r\n        )\r\n      }\r\n\r\n      // Fallback to lookup via API\r\n    }\r\n\r\n    // Lookup key data from API\r\n    const freshKeyData: CachedKeyData = {\r\n      id: keyId,\r\n      lastRefreshed: new Date().toISOString(),\r\n      key: await this.getPublicKey(keyId),\r\n    };\r\n\r\n    // Cache the updated key data\r\n    await this._cacheKeyData(freshKeyData, cacheConfig);\r\n\r\n    return freshKeyData.key;\r\n  }\r\n\r\n  /**\r\n   * Lookup current active public key from the cache.\r\n   * If the key has been in the cache for more than `maxAgeMs` milliseconds, it is considered\r\n   * stale, and will be ignored - causing it to be re-fetched from Akahu. `maxAgeMs` defaults to 24 hours.\r\n   * \r\n   * {@link https://developers.akahu.nz/docs/reference-webhooks#caching}\r\n   */\r\n  private async _getPublicKeyFromCache(cacheConfig: WebhookCacheConfig): Promise<CachedKeyData | null> {\r\n    const { cache, key: cacheKey, maxAgeMs } = cacheConfig;\r\n\r\n    // Lookup key data from cache\r\n    const rawFromCache = await cache.get(cacheKey);\r\n\r\n    // Cache hit\r\n    if (typeof rawFromCache === 'string') {\r\n      let keyData: CachedKeyData | undefined;\r\n\r\n      // Deserialize key data JSON from cache\r\n      try { keyData = JSON.parse(rawFromCache) }\r\n      catch (e) {\r\n        // Warn but no error if invalid JSON in cache data\r\n        console.warn(`akahu-sdk: Failed to deserialize webhook key data from cache (key: ${cacheKey}).`)\r\n      }\r\n\r\n      // Validate the key data from cache\r\n      if (typeof keyData !== 'undefined') {\r\n        // Ensure that the cache is at most `maxAgeMs` old\r\n        const cacheAgeMs = Date.now() - Date.parse(keyData.lastRefreshed);\r\n        // NaN check in case lastRefreshed is invalid date string or undefined somehow\r\n        if (!Number.isNaN(cacheAgeMs) && cacheAgeMs < maxAgeMs) {\r\n          return keyData;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Cache miss or invalid cache data\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Add the public key that has been fetched from the API to the cache.\r\n   * \r\n   * {@link https://developers.akahu.nz/docs/reference-webhooks#caching}\r\n   */\r\n  private async _cacheKeyData(keyData: CachedKeyData, cacheConfig: WebhookCacheConfig): Promise<void> {\r\n    const { cache, key } = cacheConfig;\r\n    await cache.set(key, JSON.stringify(keyData));\r\n  }\r\n\r\n  /**\r\n   * Validate a webhook and associated signature using the public key fetched from the Akahu API.\r\n   * \r\n   * {@link https://developers.akahu.nz/docs/reference-webhooks#verification}\r\n   */\r\n  private _validateWebhookSignature(publicKey: string, signature: string, webhookBody: string): boolean {\r\n    if (typeof crypto === 'undefined') {\r\n      throw new Error('Webhook validation is only supported on Node.js environments.')\r\n    }\r\n\r\n    const verify = crypto.createVerify(\"sha256\");\r\n    verify.update(webhookBody);\r\n    verify.end();\r\n\r\n    return verify.verify(publicKey, signature, \"base64\");\r\n  }\r\n}","import axios from \"axios\";\r\nimport type { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { buildUrl, pick, Protocol, isNode, isBrowser, axiosRetryOnNetworkError } from './utils';\r\nimport { version } from \"./version\";\r\nimport { AkahuErrorResponse } from \"./errors\";\r\n\r\nimport { Paginated } from './models';\r\nimport { AuthResource } from './resources/auth';\r\nimport { IdentitiesResource } from './resources/identities';\r\nimport { AccountsResource } from \"./resources/accounts\";\r\nimport { ConnectionsResource } from './resources/connections';\r\nimport { PaymentsResource } from './resources/payments';\r\nimport { TransfersResource } from './resources/transfers';\r\nimport { TransactionsResource } from './resources/transactions';\r\nimport { UsersResource } from './resources/users';\r\nimport { WebhooksResource } from './resources/webhooks';\r\n\r\n// We will set this header to report SDK version\r\nconst X_AKAHU_SDK = `akahu-sdk-js/${version}`\r\n\r\ntype ApiVersion = 'v1';\r\n\r\n/**\r\n * @category API client config\r\n */\r\nexport { Protocol } from './utils';\r\n\r\n/**\r\n * Authentication and API endpoint configuration for {@link AkahuClient}.\r\n * @category API client config\r\n */\r\nexport type AkahuClientConfig = {\r\n  /**\r\n   * appToken is required to access the Akahu API.\r\n   */\r\n  appToken: string,\r\n  /**\r\n   * appSecret is only required for completing an OAuth code exchange, or to\r\n   * access app-specific endpoints.\r\n   * \r\n   * For security reasons, this option must not be used client-side in the browser.\r\n   * \r\n   * {@link https://developers.akahu.nz/reference/api_index}\r\n   * \r\n   * @defaultValue `undefined`\r\n   */\r\n  appSecret?: string,\r\n  /**\r\n   * The Akahu API version. Currently the only supported value is \"v1\".\r\n   * \r\n   * @defaultValue `v1`\r\n   */\r\n  apiVersion?: ApiVersion,\r\n  /**\r\n   * The protocol used for Akahu API calls.\r\n   * The Akahu API only supports connections over HTTPS, so this option is only\r\n   * useful for test environments etc.\r\n   * \r\n   * @defaultValue `https`\r\n   */\r\n  protocol?: Protocol,\r\n  /**\r\n   * The Akahu API hostname.\r\n   * It may be useful to override this in staging / testing environments.\r\n   * \r\n   * @defaultValue `api.akahu.io`\r\n   */\r\n  host?: string,\r\n  /**\r\n   * The Akahu API port.\r\n   * It may be useful to override this in staging / testing environments.\r\n   *\r\n   * @defaultValue `undefined`\r\n   */\r\n  port?: number,\r\n  /**\r\n   * Additional headers that will be included in each request.\r\n   */\r\n  headers?: Record<string, string>,\r\n  /**\r\n   * Timeout in ms for each request to the Akahu API.\r\n   * \r\n   * If used in combination with `retries`, the timeout will be applied to\r\n   * each retried request. This means that the total time until an error is\r\n   * thrown due to a timeout will be `timeout * (retries + 1)` milliseconds.\r\n   * \r\n   * @defaultValue `0` (no timeout)\r\n   */\r\n  timeout?: number,\r\n  /**\r\n   * The number of times that API requests will be retried in the case of\r\n   * network errors. Error responses from the Akahu API will not result in\r\n   * a retry.\r\n   * \r\n   * @defaultValue `0`\r\n   */\r\n  retries?: number,\r\n  /**\r\n   * Optional configuration for an HTTP proxy.\r\n   * \r\n   * See the proxy section of the axios {@link https://axios-http.com/docs/req_config request config}\r\n   * for more details.\r\n   */\r\n  proxy?: {\r\n    host: string;\r\n    port: number;\r\n    auth?: {\r\n      username: string;\r\n      password: string;\r\n    };\r\n    protocol?: string;\r\n  },\r\n};\r\n\r\n// We allow custom axios configuration using this subset of options\r\nconst allowedAxiosOptions = ['headers', 'timeout', 'proxy', 'retries'] as const;\r\n\r\n\r\n// Internal flag to switch between API authentication methods\r\ntype AuthMethod = { basic: true } | { token: string };\r\n\r\n\r\n// Internal union type to capture the different shapes of response payloads\r\ntype ApiResponsePayload =\r\n  Record<string, any>               // Generic `item` response\r\n  | Record<string, any>[]           // `items` list response\r\n  | Paginated<Record<string, any>>  // Paginated `items` list response\r\n  | string                          // `item_id` response\r\n  | void;                           // No response payload\r\n\r\n\r\n/**\r\n * The AkahuClient provides a simple interface to the Akahu API and utilities\r\n * that assist with common usage patterns.\r\n * \r\n * AkahuClient uses {@link https://axios-http.com/docs/intro axios} under the hood to make\r\n * API requests. A subset of axios request options can be passed through to the underlying axios\r\n * instance using the options available in {@link AkahuClientConfig}.\r\n * \r\n * In the case of an error while making an API request, you can expect to handle one of the\r\n * following two exceptions:\r\n * \r\n * - {@link AkahuErrorResponse} When an error response is returned from the API\r\n * - {@link https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L85 AxiosError} when an error\r\n *    occurred during the request process, but no response was received (i.e. due to network issues).\r\n * \r\n * @category API client\r\n */\r\nexport class AkahuClient {\r\n  private readonly axios: AxiosInstance;\r\n  /** @internal */\r\n  readonly authConfig: { appToken: string, appSecret?: string }\r\n\r\n  /**\r\n   * @category Resource\r\n   * @inheritDoc AuthResource\r\n   * */\r\n  auth: AuthResource;\r\n  /**\r\n   * @category Resource\r\n   * @inheritDoc IdentitiesResource\r\n   * */\r\n  identities: IdentitiesResource;\r\n  /**\r\n   * @category Resource\r\n   * @inheritDoc UsersResource\r\n   * */\r\n  users: UsersResource;\r\n   /**\r\n    * @category Resource\r\n    * @inheritDoc ConnectionsResource\r\n    * */\r\n  connections: ConnectionsResource;\r\n  /**\r\n   * @category Resource\r\n   * @inheritDoc AccountsResource\r\n   * */\r\n  accounts: AccountsResource;\r\n  /**\r\n   * @category Resource\r\n   * @inheritDoc PaymentsResource\r\n   * */\r\n  payments: PaymentsResource;\r\n  /**\r\n  * @category Resource\r\n  * @inheritDoc TransfersResource\r\n  * */\r\n  transfers: TransfersResource;\r\n  /**\r\n   * @category Resource\r\n   * @inheritDoc TransactionsResource\r\n   * */\r\n  transactions: TransactionsResource;\r\n  /**\r\n   * @category Resource\r\n   * @inheritDoc WebhooksResource\r\n   * */\r\n  webhooks: WebhooksResource;\r\n\r\n  constructor(config: AkahuClientConfig) {\r\n    const {\r\n      appToken, appSecret, apiVersion, protocol, host, port, ...axiosOptions\r\n    } = {\r\n      apiVersion: 'v1' as const,\r\n      protocol: 'https' as const,\r\n      host: 'api.akahu.io',\r\n      ...config\r\n    };\r\n    // Sanity check to warn against insecure App Secret usage\r\n    if (typeof appSecret !== 'undefined' && !isNode()) {\r\n      console.warn('Warning: do not use the appSecret option with AkahuClient in a client-side ' +\r\n                   'application. This option is only intended to be used on a server environment.');\r\n    }\r\n\r\n    this.authConfig = { appToken, appSecret };\r\n\r\n    // Common headers that we will send with each request\r\n    const akahuHeaders: Record<string, string> = {\r\n      'X-Akahu-Sdk': X_AKAHU_SDK, // Report the SDK version\r\n      'X-Akahu-Id': appToken,     // Identify the calling app\r\n    };\r\n\r\n    // Also report SDK version in the User-Agent for convenience / visibility in logs. However\r\n    // we don't want to set this in a browser environment as not all browsers support overriding\r\n    // this header and it may result in un-suppressible errors in the browser console.\r\n    // e.g: https://github.com/axios/axios/issues/1231\r\n    if (!isBrowser()) {\r\n      akahuHeaders['User-Agent'] = X_AKAHU_SDK;\r\n    }\r\n\r\n    // Filter user-provided config to ensure we only include supported options.\r\n    const filteredAxiosOptions = pick<AxiosRequestConfig>(axiosOptions, ...allowedAxiosOptions);\r\n\r\n    this.axios = axios.create({\r\n      ...filteredAxiosOptions,\r\n      baseURL: buildUrl({ protocol, host, port, path: apiVersion }),\r\n      headers: { ...filteredAxiosOptions.headers, ...akahuHeaders },\r\n    } as AxiosRequestConfig);\r\n\r\n    this.axios.interceptors.response.use(undefined, axiosRetryOnNetworkError);\r\n\r\n    // Initialise client resources\r\n    this.auth = new AuthResource(this);\r\n    this.identities = new IdentitiesResource(this);\r\n    this.users = new UsersResource(this);\r\n    this.connections = new ConnectionsResource(this);\r\n    this.accounts = new AccountsResource(this);\r\n    this.payments = new PaymentsResource(this);\r\n    this.transfers = new TransfersResource(this);\r\n    this.transactions = new TransactionsResource(this);\r\n    this.webhooks = new WebhooksResource(this);\r\n  }\r\n\r\n  private _authorizeRequest(config: AxiosRequestConfig, auth?: AuthMethod) : AxiosRequestConfig {    \r\n    if (typeof auth !== 'undefined') {\r\n      // Basic HTTP auth is use for \"app\" endpoints\r\n      if ('basic' in auth && auth.basic) {\r\n        const { appToken, appSecret } = this.authConfig;\r\n  \r\n        if (typeof appSecret === 'undefined') {\r\n          throw new Error(\r\n            'This resource requires authentication using your Akahu app secret. ' +\r\n            'Include this using the `appSecret` option when initializing the AkahuClient.'\r\n          );\r\n        }\r\n        return { ...config, auth: { username: appToken, password: appSecret }};\r\n      }\r\n      // Token auth is used for user-specific endpoints\r\n      if ('token' in auth) {\r\n        return {\r\n          ...config,\r\n          headers: {\r\n            ...config.headers,\r\n            Authorization: `Bearer ${auth.token}`,\r\n          }\r\n        };\r\n      }\r\n    }\r\n\r\n    return config;\r\n  }\r\n\r\n  private _makeIdempotent(config: AxiosRequestConfig) : AxiosRequestConfig {\r\n    if (config.method?.toUpperCase() === 'POST') {\r\n      return { ...config, headers: { ...config.headers,\r\n                                     'Idempotency-Key': uuidv4() }}\r\n    }\r\n\r\n    return config;\r\n  }\r\n\r\n  private _sanitizeQuery(query: Record<string, any>): Record<string, any> {\r\n    // Sanity check for attempts to paginate with a `null` cursor. This might\r\n    // happen if the user blindly passes in the \"next\" cursor from a paginated\r\n    // response without checking its value. `query.cursor` must either be\r\n    // `undefined` or a string value.\r\n    if (query.cursor === null) {\r\n      throw new Error(\"Pagination cursor cannot be null. A null next cursor in an API \" +\r\n                      \"response indicates that the final page has been reached.\");\r\n    }\r\n\r\n    return query;\r\n  }\r\n\r\n  /**\r\n   * Generic API wrapper, exposed for use by client resources.\r\n   * @internal\r\n   */\r\n  async _apiCall<T extends ApiResponsePayload>(\r\n    { path, method = 'GET', query, data, auth } :\r\n    {\r\n      path: string,\r\n      method?: 'GET' | 'POST' | 'DELETE',\r\n      query?: Record<string, any>,\r\n      data?: any,\r\n      auth?: AuthMethod,\r\n    }\r\n  ) : Promise<T> {\r\n    let params = query;\r\n\r\n    if (typeof params !== 'undefined') {\r\n      params = this._sanitizeQuery(params);\r\n    }\r\n\r\n    // Build up the request config object for axios\r\n    let requestConfig: AxiosRequestConfig = { url: path, method, params, data };\r\n    requestConfig = this._authorizeRequest(requestConfig, auth);\r\n    requestConfig = this._makeIdempotent(requestConfig);\r\n\r\n    let response: AxiosResponse;\r\n\r\n    try {\r\n      response = await this.axios.request(requestConfig);\r\n    } catch (e) {\r\n      // Wrap error responses from the API\r\n      if (typeof e.response !== 'undefined') {\r\n        throw new AkahuErrorResponse(e.response);\r\n      }\r\n      // All other errors are re-raised.\r\n      throw e;\r\n    }\r\n\r\n    // Unpack response:\r\n    // - success will always be present\r\n    // - cursor will be present in the case of paginated responses\r\n    // - response value will generally be nested under `item`, `items`, or `item_id`\r\n    const { success, cursor, ...payload } = response.data;\r\n\r\n    // Check status flag from API. Generally we shouldn't hit this, as any response\r\n    // with `success: false` should return a 4xx or 5xx status which would\r\n    // cause an exception above.\r\n    if (!success) throw new AkahuErrorResponse(response);\r\n  \r\n    // Results from paginated responses are always nested under `items`\r\n    if (cursor) {\r\n      return { cursor, items: payload.items } as T;\r\n    }\r\n\r\n    // Unpacking of non-paginated response formats:\r\n    // https://developers.akahu.nz/docs/response-formatting\r\n    // Order is important here, as some endpoints return both `item` and\r\n    // `item_id`, the latter of which is deprecated.\r\n    return (\r\n      payload.item          // Single item response\r\n        ?? payload.item_id  // Item id response\r\n        ?? payload.items    // Item list response\r\n        ?? (Object.keys(payload).length !== 0\r\n            ? payload     // OAuth response data is not nested to be spec-compliant\r\n            : undefined)  // No response payload: no return value\r\n    ) as T;\r\n  }\r\n}\r\n"],"names":["axios","uuidv4"],"mappings":"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"}